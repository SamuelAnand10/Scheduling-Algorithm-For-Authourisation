# -*- coding: utf-8 -*-
"""Coursework2.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1od5H6ATLofcQRlR7bGcyydO9tOW0wfev
"""

!pip install ortools
!pip install z3-solver

import re
import numpy
from z3 import *
from time import time as currenttime
from ortools.sat.python import cp_model

# Helper function to transform the output into a readable format
def transform_output(d):
    crlf = '\r\n'
    s = []
    s = ''.join(kk + crlf for kk in d['sol'])
    s = d['sat'] + crlf + s + d['mul_sol']
    s = crlf + s + crlf + str(d['exe_time']) if 'exe_time' in d else s
    return s

# Solution Printer for intermediate solutions
class VarArraySolutionPrinter(cp_model.CpSolverSolutionCallback):
    """Print intermediate solutions."""
    def __init__(self, variables, limit):
        cp_model.CpSolverSolutionCallback.__init__(self)
        self.__variables = variables
        self.__solution_count = 0
        self.__solution_limit = limit

    def on_solution_callback(self):
        self.__solution_count += 1
        for v in self.__variables:
            for user in range(len(v)):
                if self.Value(v[user]) == 1:
                    print(f'[{v[user]}]', end=' ')
        print()
        if self.__solution_count >= self.__solution_limit:
            print(f'\nStop searching after {self.__solution_limit} solutions found')
            self.StopSearch()

    def solution_count(self):
        return self.__solution_count

# Instance class to represent problem data
class Instance:
    def __init__(self):
        self.number_of_steps = 0
        self.number_of_users = 0
        self.number_of_constraints = 0
        self.auth = []  # index: the user || element: steps authorised to the user
        self.SOD = []  # the list of pairs of steps that must be assigned to different users
        self.BOD = []  # the list of pairs of steps that must be assigned to the same user
        self.at_most_k = []  # the list of pairs of k and steps
        self.one_team = []  # the list of pairs of steps and teams

# Read problem file and parse constraints
def read_file(filename):
    def read_attribute(name):
        line = f.readline()
        match = re.match(f'{name}:\\s*(\\d+)$', line)
        if match:
            return int(match.group(1))
        else:
            raise Exception(f"Could not parse line {line}; expected the {name} attribute")

    instance = Instance()
    with open(filename) as f:
        instance.number_of_steps = read_attribute("#Steps")
        instance.number_of_users = read_attribute("#Users")
        instance.number_of_constraints = read_attribute("#Constraints")

        # Initialise instance.auth with empty lists as elements
        instance.auth = [[] for u in range(instance.number_of_users)]

        for i in range(instance.number_of_constraints):
            l = f.readline()

            # 1st Constraint: Authorisations
            m = re.match(r"Authorisations u(\d+)(?: s\d+)*", l)
            if m:
                user_id = int(m.group(1))
                steps = [-1]  # For users that are not authorised to perform any steps, eg. Authorisations u1
                for m in re.finditer(r's(\d+)', l):
                    if -1 in steps:
                        steps.remove(-1)  # If user has specified steps, then only store the steps authorised
                    steps.append(int(m.group(1)) - 1)  # -1 because list index starts from 0
                instance.auth[user_id - 1].extend(steps)
                continue

            # 2nd Constraint: Separation-of-duty
            m = re.match(r'Separation-of-duty s(\d+) s(\d+)', l)
            if m:
                steps = (int(m.group(1)) - 1, int(m.group(2)) - 1)
                instance.SOD.append(steps)
                continue

            # 3rd Constraint: Binding-of-duty
            m = re.match(r'Binding-of-duty s(\d+) s(\d+)', l)
            if m:
                steps = (int(m.group(1)) - 1, int(m.group(2)) - 1)
                instance.BOD.append(steps)
                continue

            # 4th Constraint: At-most-k
            m = re.match(r'At-most-k (\d+) (s\d+)(?: (s\d+))*', l)
            if m:
                k = int(m.group(1))
                steps = []
                for m in re.finditer(r's(\d+)', l):
                    steps.append(int(m.group(1)) - 1)
                instance.at_most_k.append((k, steps))
                continue

            # 5th Constraint: One-team constraint
            m = re.match(r'One-team\s+(s\d+)(?: s\d+)* (\((u\d+)*\))*', l)
            if m:
                steps = []
                for m in re.finditer(r's(\d+)', l):
                    steps.append(int(m.group(1)) - 1)
                teams = []
                for m in re.finditer(r'\((u\d+\s*)+\)', l):
                    team = []
                    for users in re.finditer(r'u(\d+)', m.group(0)):
                        team.append(int(users.group(1)) - 1)
                    teams.append(team)
                instance.one_team.append((steps, teams))
                continue
            else:
                raise Exception(f'Failed to parse this line: {l}')

    return instance


# Solver function
def Solver(instance, filename, **kwargs):
    print("=====================================================")
    print(f'\tFile: {filename}')
    print(f'\tNumber of Steps: {instance.number_of_steps}')
    print(f'\tNumber of Users: {instance.number_of_users}')
    print(f'\tNumber of Constraints: {instance.number_of_constraints}')
    print(f'\tAuthorisations: {instance.auth}')
    print(f'\tSeparation-of-duty: {instance.SOD}')
    print(f'\tBinding-of-duty: {instance.BOD}')
    print(f'\tAt-most-k: {instance.at_most_k}')
    print(f'\tOne-team: {instance.one_team}')
    print("=====================================================")

    model = cp_model.CpModel()
    user_assignment = [[model.NewBoolVar(f's{s + 1}: u{u + 1}') for u in range(instance.number_of_users)]
                       for s in range(instance.number_of_steps)]

    print("User assignment variables created:")
    print(user_assignment)



# Add authorization constraints (if a user is authorized for a step, they must perform it)
    for step in range(instance.number_of_steps):
        model.AddExactlyOne(user_assignment[step][user] for user in range(instance.number_of_users))

    for user in range(instance.number_of_users):
        if instance.auth[user]:
            for step in range(instance.number_of_steps):
                if step not in instance.auth[user]:
                    model.Add(user_assignment[step][user] == 0)

    for (step1, step2) in instance.SOD:
        for user in range(instance.number_of_users):
            model.Add(user_assignment[step2][user] == 0).OnlyEnforceIf(user_assignment[step1][user])

    for (step1, step2) in instance.BOD:
        for user in range(instance.number_of_users):
            model.Add(user_assignment[step2][user] == 1).OnlyEnforceIf(user_assignment[step1][user])

    for (k, steps) in instance.at_most_k:
        user_flags = [model.NewBoolVar(f'at-most-k_u{u}') for u in range(instance.number_of_users)]
        for user in range(instance.number_of_users):
            for step in steps:
                model.Add(user_flags[user] == 1).OnlyEnforceIf(user_assignment[step][user])
            model.Add(sum(user_flags) <= k)
# Print the model information to check the constraints
    # Steps can only be assigned to a team with flag = 1
# Steps cannot be assigned to users with no team
    for (steps, teams) in instance.one_team:
        team_flag = [model.NewBoolVar(f'team{t}') for t in range(len(teams))]
        model.AddExactlyOne(team_flag)  # Only one team can be chosen

        for team_index in range(len(teams)):
            for step in steps:
                for user in teams[team_index]:
                    model.Add(user_assignment[step][user] == 0).OnlyEnforceIf(team_flag[team_index].Not())

    # Steps cannot be assigned to users that are not listed in teams
        users_in_teams = list(numpy.concatenate(teams).flat)
        for step in steps:
            for user in range(instance.number_of_users):
                if user not in users_in_teams:
                    model.Add(user_assignment[step][user] == 0)


    starttime = float(currenttime() * 1000)
    solver = cp_model.CpSolver()
    solution_printer = VarArraySolutionPrinter(user_assignment, 30 )
    solver.parameters.enumerate_all_solutions = True
    status = solver.Solve(model, solution_printer)
    endtime = float(currenttime() * 1000)

    d = {
        'sat': 'unsat',
        'sol': '',
        'mul_sol': '',
        'exe_time': str(endtime - starttime) + 'ms'
    }

    if status == cp_model.OPTIMAL or status == cp_model.FEASIBLE:
        d['sat'] = 'sat'
        dsol = []
        for s in range(instance.number_of_steps):
            for u in range(instance.number_of_users):
                if solver.Value(user_assignment[s][u]):
                    dsol.append(f's{s + 1}: u{u + 1}')
        d['sol'] = dsol
        d['mul_sol'] = f'other solutions exist, {solution_printer.solution_count()} solutions found'
    return d

# Main execution block
if __name__ == '__main__':
    for i in range(19):
      dpath = f'example{i+1}.txt'
      inst = read_file(dpath)
      d = Solver(inst, dpath)
      s = transform_output(d)
      print(s)